name: Backend Tests

on:
  push:
    branches: [ main ]
    paths:
      - '**'
      - '!**.md'
      - '!.gitignore'
  pull_request:
    branches: [ main ]
    paths:
      - '**'
      - '!**.md'
      - '!.gitignore'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: workout_motivator_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov httpx starlette pytest-github-actions-annotate-failures psycopg2-binary

    - name: List installed packages
      run: |
        pip freeze

    - name: List directory structure
      run: |
        pwd
        ls -la
        ls -la tests/

    - name: Run unit tests
      run: |
        PYTHONPATH=. python -m pytest \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=pytest.xml \
          -v \
          tests/test_exercises.py

    - name: Run integration tests
      env:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: admin
        POSTGRES_DB: test_workout_motivator_db
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: |
        PYTHONPATH=. python -m pytest \
          --cov=app \
          --cov-append \
          --cov-report=xml \
          --cov-report=term-missing \
          -v \
          tests/test_integration.py

    - name: Test Summary
      uses: test-summary/action@v2
      with:
        paths: pytest.xml
      if: always()

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true
